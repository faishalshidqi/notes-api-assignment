// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: notes.sql

package database

import (
	"context"
)

const createNote = `-- name: CreateNote :exec
insert into notes(id, title, description, created_at, updated_at, owner) values(?, ?, ?, current_timestamp, current_timestamp, ?)
`

type CreateNoteParams struct {
	ID          string `db:"id" json:"id"`
	Title       string `db:"title" json:"title"`
	Description string `db:"description" json:"description"`
	Owner       string `db:"owner" json:"owner"`
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) error {
	_, err := q.db.ExecContext(ctx, createNote,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Owner,
	)
	return err
}

const deleteNote = `-- name: DeleteNote :exec
delete from notes where id = ?
`

func (q *Queries) DeleteNote(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteNote, id)
	return err
}

const editNote = `-- name: EditNote :exec
update notes set title = ?, description = ?, updated_at = current_timestamp where id = ?
`

type EditNoteParams struct {
	Title       string `db:"title" json:"title"`
	Description string `db:"description" json:"description"`
	ID          string `db:"id" json:"id"`
}

func (q *Queries) EditNote(ctx context.Context, arg EditNoteParams) error {
	_, err := q.db.ExecContext(ctx, editNote, arg.Title, arg.Description, arg.ID)
	return err
}

const getNote = `-- name: GetNote :one
select id, title, description, created_at, updated_at, owner from notes where id = ?
`

func (q *Queries) GetNote(ctx context.Context, id string) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNote, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Owner,
	)
	return i, err
}

const getNotes = `-- name: GetNotes :many
select notes.id, notes.title, notes.description, notes.created_at, notes.updated_at, notes.owner from notes join users on notes.owner = users.id where notes.owner = ?
`

func (q *Queries) GetNotes(ctx context.Context, owner string) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, getNotes, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Owner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
